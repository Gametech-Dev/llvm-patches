#    Description                  : Added checks in SimplifyCFG, GVN, and EarlyCSE to prevent hoisting 
#                                   or sinking convergent functions out of or into control flow (all 
#                                   wave intrinsics are marked as convergent).
#    When Fixed in Open Source    : Needed till a cleaner solution is worked out.
#    P4V CL                       : 696122(4.0.0)
#    Category                     : Custom
#    Author                       : djwoo
#    Open Source Classification   : Common
#    Impact                       : Functional
#    Failing Workload/Commandline : TE.exe D3DConf_12_Core.dll /enablewttlogging /appendwttlogging /name:DXILConfTest::WaveIntrinsics*
#    Notes                        : Need further guidance from the community on whether the convergent 
#                                   function attribute should cover this case or whether there needs to 
#                                   be a new mechanism to handle it. The current suggestion of adding 
#                                   inline asm at every relevant call site is hackish.

diff -Naur --strip-trailing-cr a/lib/Transforms/Scalar/EarlyCSE.cpp b/lib/Transforms/Scalar/EarlyCSE.cpp
--- a/lib/Transforms/Scalar/EarlyCSE.cpp	2017-10-23 14:47:17.025523189 -0400
+++ b/lib/Transforms/Scalar/EarlyCSE.cpp	2017-10-23 14:48:59.041519192 -0400
@@ -695,6 +695,9 @@
     if (SimpleValue::canHandle(Inst)) {
       // See if the instruction has an available value.  If so, use it.
       if (Value *V = AvailableValues.lookup(Inst)) {
+        CallInst *CI = dyn_cast<CallInst>(Inst);
+        if (CI && CI->isConvergent() && cast<CallInst>(V)->getParent() != BB)
+          continue;
         DEBUG(dbgs() << "EarlyCSE CSE: " << *Inst << "  to: " << *V << '\n');
         if (auto *I = dyn_cast<Instruction>(V))
           I->andIRFlags(Inst);
diff -Naur --strip-trailing-cr a/lib/Transforms/Scalar/GVN.cpp b/lib/Transforms/Scalar/GVN.cpp
--- a/lib/Transforms/Scalar/GVN.cpp	2017-10-23 14:47:17.026523189 -0400
+++ b/lib/Transforms/Scalar/GVN.cpp	2017-10-23 14:49:29.426518002 -0400
@@ -349,6 +349,10 @@
 }
 
 uint32_t GVN::ValueTable::lookupOrAddCall(CallInst *C) {
+  if(C->isConvergent()) {
+    valueNumbering[C] = nextValueNumber;
+    return nextValueNumber++;
+  } else
   if (AA->doesNotAccessMemory(C)) {
     Expression exp = createExpr(C);
     uint32_t &e = expressionNumbering[exp];
diff -Naur --strip-trailing-cr a/lib/Transforms/Utils/SimplifyCFG.cpp b/lib/Transforms/Utils/SimplifyCFG.cpp
--- a/lib/Transforms/Utils/SimplifyCFG.cpp	2017-10-23 14:47:17.021523189 -0400
+++ b/lib/Transforms/Utils/SimplifyCFG.cpp	2017-10-23 14:52:00.826512071 -0400
@@ -1240,8 +1240,10 @@
     while (isa<DbgInfoIntrinsic>(I2))
       I2 = &*BB2_Itr++;
   }
+  CallInst *CI1 = dyn_cast<CallInst>(I1);
   if (isa<PHINode>(I1) || !I1->isIdenticalToWhenDefined(I2) ||
-      (isa<InvokeInst>(I1) && !isSafeToHoistInvoke(BB1, BB2, I1, I2)))
+      (isa<InvokeInst>(I1) && !isSafeToHoistInvoke(BB1, BB2, I1, I2)) ||
+      (CI1 && CI1->isConvergent() && CI1->isIdenticalToWhenDefined(I2)))
     return false;
 
   BasicBlock *BIParent = BI->getParent();
@@ -1256,6 +1258,10 @@
     if (!TTI.isProfitableToHoist(I1) || !TTI.isProfitableToHoist(I2))
       return Changed;
 
+    CallInst *CI1 = dyn_cast<CallInst>(I1);
+    if (CI1 && CI1->isConvergent() && CI1->isIdenticalToWhenDefined(I2))
+      return Changed;
+
     // For a normal instruction, we just move one to right before the branch,
     // then replace all uses of the other with the first.  Finally, we remove
     // the now redundant second instruction.
@@ -1907,6 +1913,8 @@
     // I1 and I2 should have a single use in the same PHI node, and they
     // perform the same operation.
     // Cannot move control-flow-involving, volatile loads, vaarg, etc.
+    CallInst *CI1 = dyn_cast<CallInst>(I1);
+    CallInst *CI2 = dyn_cast<CallInst>(I2);
     if (isa<PHINode>(I1) || isa<PHINode>(I2) ||
         isa<TerminatorInst>(I1) || isa<TerminatorInst>(I2) ||
         I1->isEHPad() || I2->isEHPad() ||
@@ -1914,6 +1922,7 @@
         I1->mayHaveSideEffects() || I2->mayHaveSideEffects() ||
         I1->mayReadOrWriteMemory() || I2->mayReadOrWriteMemory() ||
         !I1->hasOneUse() || !I2->hasOneUse() ||
+        (CI1 && CI1->isConvergent()) || (CI2 && CI2->isConvergent()) ||
         !JointValueMap.count(InstPair))
       return Changed;
 
